// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: definicion_mensajeria.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "definicion_mensajeria.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mensajes {

namespace {

const ::google::protobuf::Descriptor* MessageHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageHeader_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TypeValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TypeValue_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InfoDupla_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfoDupla_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageCommand_ECmdState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EventInfoDupla_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventInfoDupla_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_definicion_5fmensajeria_2eproto() {
  protobuf_AddDesc_definicion_5fmensajeria_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "definicion_mensajeria.proto");
  GOOGLE_CHECK(file != NULL);
  MessageHeader_descriptor_ = file->message_type(0);
  static const int MessageHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, idcompsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, idmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, returnack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, idcomptarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, timestamp_),
  };
  MessageHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageHeader_descriptor_,
      MessageHeader::default_instance_,
      MessageHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageHeader));
  MessageHeader_MessageType_descriptor_ = MessageHeader_descriptor_->enum_type(0);
  TypeValue_descriptor_ = file->message_type(1);
  static const int TypeValue_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeValue, typarg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeValue, strarg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeValue, int32arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeValue, uint32arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeValue, floatarg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeValue, doublearg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeValue, boolarg_),
  };
  TypeValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypeValue_descriptor_,
      TypeValue::default_instance_,
      TypeValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypeValue));
  TypeValue_Type_descriptor_ = TypeValue_descriptor_->enum_type(0);
  InfoDupla_descriptor_ = file->message_type(2);
  static const int InfoDupla_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoDupla, idarg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoDupla, argvalue_),
  };
  InfoDupla_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfoDupla_descriptor_,
      InfoDupla::default_instance_,
      InfoDupla_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoDupla, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoDupla, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfoDupla));
  MessageCommand_descriptor_ = file->message_type(3);
  static const int MessageCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCommand, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCommand, idcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCommand, cmdstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCommand, argument_),
  };
  MessageCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageCommand_descriptor_,
      MessageCommand::default_instance_,
      MessageCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageCommand));
  MessageCommand_ECmdState_descriptor_ = MessageCommand_descriptor_->enum_type(0);
  EventInfoDupla_descriptor_ = file->message_type(4);
  static const int EventInfoDupla_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfoDupla, idcomponente_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfoDupla, idevento_),
  };
  EventInfoDupla_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventInfoDupla_descriptor_,
      EventInfoDupla::default_instance_,
      EventInfoDupla_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfoDupla, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfoDupla, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventInfoDupla));
  MessageEvent_descriptor_ = file->message_type(5);
  static const int MessageEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageEvent, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageEvent, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageEvent, eventtype_),
  };
  MessageEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageEvent_descriptor_,
      MessageEvent::default_instance_,
      MessageEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageEvent));
  MessageData_descriptor_ = file->message_type(6);
  static const int MessageData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, iddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, metadatos_),
  };
  MessageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageData_descriptor_,
      MessageData::default_instance_,
      MessageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_definicion_5fmensajeria_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageHeader_descriptor_, &MessageHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypeValue_descriptor_, &TypeValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfoDupla_descriptor_, &InfoDupla::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageCommand_descriptor_, &MessageCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventInfoDupla_descriptor_, &EventInfoDupla::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageEvent_descriptor_, &MessageEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageData_descriptor_, &MessageData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_definicion_5fmensajeria_2eproto() {
  delete MessageHeader::default_instance_;
  delete MessageHeader_reflection_;
  delete TypeValue::default_instance_;
  delete TypeValue_reflection_;
  delete InfoDupla::default_instance_;
  delete InfoDupla_reflection_;
  delete MessageCommand::default_instance_;
  delete MessageCommand_reflection_;
  delete EventInfoDupla::default_instance_;
  delete EventInfoDupla_reflection_;
  delete MessageEvent::default_instance_;
  delete MessageEvent_reflection_;
  delete MessageData::default_instance_;
  delete MessageData_reflection_;
}

void protobuf_AddDesc_definicion_5fmensajeria_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033definicion_mensajeria.proto\022\010Mensajes\""
    "\333\001\n\rMessageHeader\022\024\n\014IDCompSource\030\001 \002(\r\022"
    "\021\n\tIDMessage\030\002 \002(\r\022\021\n\tReturnAck\030\003 \002(\010\0224\n"
    "\007MsgType\030\004 \002(\0162#.Mensajes.MessageHeader."
    "MessageType\022\024\n\014IDCompTarget\030\005 \002(\r\022\021\n\ttim"
    "estamp\030\006 \002(\001\"/\n\013MessageType\022\013\n\007Command\020\001"
    "\022\t\n\005Event\020\002\022\010\n\004Data\020\003\"\204\002\n\tTypeValue\022(\n\006t"
    "ypArg\030\001 \002(\0162\030.Mensajes.TypeValue.Type\022\016\n"
    "\006strArg\030\002 \001(\t\022\020\n\010int32Arg\030\003 \001(\005\022\021\n\tuint3"
    "2Arg\030\004 \001(\r\022\020\n\010floatArg\030\005 \001(\002\022\021\n\tdoubleAr"
    "g\030\006 \001(\001\022\017\n\007boolArg\030\007 \001(\010\"b\n\004Type\022\016\n\nstri"
    "ngType\020\001\022\r\n\tint32Type\020\002\022\016\n\nuint32Type\020\003\022"
    "\r\n\tfloatType\020\004\022\016\n\ndoubleType\020\005\022\014\n\010boolTy"
    "pe\020\006\"A\n\tInfoDupla\022\r\n\005IDArg\030\002 \002(\r\022%\n\010ArgV"
    "alue\030\001 \002(\0132\023.Mensajes.TypeValue\"\203\002\n\016Mess"
    "ageCommand\022\'\n\006header\030\004 \002(\0132\027.Mensajes.Me"
    "ssageHeader\022\021\n\tIDCommand\030\001 \002(\r\0224\n\010CmdSta"
    "te\030\002 \002(\0162\".Mensajes.MessageCommand.ECmdS"
    "tate\022%\n\010argument\030\003 \003(\0132\023.Mensajes.InfoDu"
    "pla\"X\n\tECmdState\022\010\n\004SEND\020\001\022\013\n\007CMD_ACK\020\002\022"
    "\017\n\013CMD_NOT_ACK\020\003\022\020\n\014CMD_EXECUTED\020\004\022\021\n\rCM"
    "D_EXECUTING\020\005\"8\n\016EventInfoDupla\022\024\n\014idCom"
    "ponente\030\001 \002(\r\022\020\n\010idEvento\030\002 \002(\r\"t\n\014Messa"
    "geEvent\022\'\n\006header\030\002 \002(\0132\027.Mensajes.Messa"
    "geHeader\022(\n\006events\030\001 \003(\0132\030.Mensajes.Even"
    "tInfoDupla\022\021\n\teventType\030\003 \002(\r\"n\n\013Message"
    "Data\022\'\n\006header\030\002 \002(\0132\027.Mensajes.MessageH"
    "eader\022\016\n\006IDData\030\003 \002(\r\022&\n\tmetadatos\030\001 \003(\013"
    "2\023.Mensajes.InfoDupla", 1141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "definicion_mensajeria.proto", &protobuf_RegisterTypes);
  MessageHeader::default_instance_ = new MessageHeader();
  TypeValue::default_instance_ = new TypeValue();
  InfoDupla::default_instance_ = new InfoDupla();
  MessageCommand::default_instance_ = new MessageCommand();
  EventInfoDupla::default_instance_ = new EventInfoDupla();
  MessageEvent::default_instance_ = new MessageEvent();
  MessageData::default_instance_ = new MessageData();
  MessageHeader::default_instance_->InitAsDefaultInstance();
  TypeValue::default_instance_->InitAsDefaultInstance();
  InfoDupla::default_instance_->InitAsDefaultInstance();
  MessageCommand::default_instance_->InitAsDefaultInstance();
  EventInfoDupla::default_instance_->InitAsDefaultInstance();
  MessageEvent::default_instance_->InitAsDefaultInstance();
  MessageData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_definicion_5fmensajeria_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_definicion_5fmensajeria_2eproto {
  StaticDescriptorInitializer_definicion_5fmensajeria_2eproto() {
    protobuf_AddDesc_definicion_5fmensajeria_2eproto();
  }
} static_descriptor_initializer_definicion_5fmensajeria_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageHeader_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageHeader_MessageType_descriptor_;
}
bool MessageHeader_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageHeader_MessageType MessageHeader::Command;
const MessageHeader_MessageType MessageHeader::Event;
const MessageHeader_MessageType MessageHeader::Data;
const MessageHeader_MessageType MessageHeader::MessageType_MIN;
const MessageHeader_MessageType MessageHeader::MessageType_MAX;
const int MessageHeader::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageHeader::kIDCompSourceFieldNumber;
const int MessageHeader::kIDMessageFieldNumber;
const int MessageHeader::kReturnAckFieldNumber;
const int MessageHeader::kMsgTypeFieldNumber;
const int MessageHeader::kIDCompTargetFieldNumber;
const int MessageHeader::kTimestampFieldNumber;
#endif  // !_MSC_VER

MessageHeader::MessageHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageHeader::InitAsDefaultInstance() {
}

MessageHeader::MessageHeader(const MessageHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageHeader::SharedCtor() {
  _cached_size_ = 0;
  idcompsource_ = 0u;
  idmessage_ = 0u;
  returnack_ = false;
  msgtype_ = 1;
  idcomptarget_ = 0u;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageHeader::~MessageHeader() {
  SharedDtor();
}

void MessageHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageHeader_descriptor_;
}

const MessageHeader& MessageHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definicion_5fmensajeria_2eproto();
  return *default_instance_;
}

MessageHeader* MessageHeader::default_instance_ = NULL;

MessageHeader* MessageHeader::New() const {
  return new MessageHeader;
}

void MessageHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idcompsource_ = 0u;
    idmessage_ = 0u;
    returnack_ = false;
    msgtype_ = 1;
    idcomptarget_ = 0u;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 IDCompSource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idcompsource_)));
          set_has_idcompsource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IDMessage;
        break;
      }

      // required uint32 IDMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IDMessage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idmessage_)));
          set_has_idmessage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ReturnAck;
        break;
      }

      // required bool ReturnAck = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnAck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &returnack_)));
          set_has_returnack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MsgType;
        break;
      }

      // required .Mensajes.MessageHeader.MessageType MsgType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mensajes::MessageHeader_MessageType_IsValid(value)) {
            set_msgtype(static_cast< ::Mensajes::MessageHeader_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IDCompTarget;
        break;
      }

      // required uint32 IDCompTarget = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IDCompTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idcomptarget_)));
          set_has_idcomptarget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_timestamp;
        break;
      }

      // required double timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 IDCompSource = 1;
  if (has_idcompsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idcompsource(), output);
  }

  // required uint32 IDMessage = 2;
  if (has_idmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idmessage(), output);
  }

  // required bool ReturnAck = 3;
  if (has_returnack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->returnack(), output);
  }

  // required .Mensajes.MessageHeader.MessageType MsgType = 4;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msgtype(), output);
  }

  // required uint32 IDCompTarget = 5;
  if (has_idcomptarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->idcomptarget(), output);
  }

  // required double timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 IDCompSource = 1;
  if (has_idcompsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idcompsource(), target);
  }

  // required uint32 IDMessage = 2;
  if (has_idmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idmessage(), target);
  }

  // required bool ReturnAck = 3;
  if (has_returnack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->returnack(), target);
  }

  // required .Mensajes.MessageHeader.MessageType MsgType = 4;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msgtype(), target);
  }

  // required uint32 IDCompTarget = 5;
  if (has_idcomptarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->idcomptarget(), target);
  }

  // required double timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 IDCompSource = 1;
    if (has_idcompsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idcompsource());
    }

    // required uint32 IDMessage = 2;
    if (has_idmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idmessage());
    }

    // required bool ReturnAck = 3;
    if (has_returnack()) {
      total_size += 1 + 1;
    }

    // required .Mensajes.MessageHeader.MessageType MsgType = 4;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // required uint32 IDCompTarget = 5;
    if (has_idcomptarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idcomptarget());
    }

    // required double timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idcompsource()) {
      set_idcompsource(from.idcompsource());
    }
    if (from.has_idmessage()) {
      set_idmessage(from.idmessage());
    }
    if (from.has_returnack()) {
      set_returnack(from.returnack());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_idcomptarget()) {
      set_idcomptarget(from.idcomptarget());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MessageHeader::Swap(MessageHeader* other) {
  if (other != this) {
    std::swap(idcompsource_, other->idcompsource_);
    std::swap(idmessage_, other->idmessage_);
    std::swap(returnack_, other->returnack_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(idcomptarget_, other->idcomptarget_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageHeader_descriptor_;
  metadata.reflection = MessageHeader_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TypeValue_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeValue_Type_descriptor_;
}
bool TypeValue_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TypeValue_Type TypeValue::stringType;
const TypeValue_Type TypeValue::int32Type;
const TypeValue_Type TypeValue::uint32Type;
const TypeValue_Type TypeValue::floatType;
const TypeValue_Type TypeValue::doubleType;
const TypeValue_Type TypeValue::boolType;
const TypeValue_Type TypeValue::Type_MIN;
const TypeValue_Type TypeValue::Type_MAX;
const int TypeValue::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TypeValue::kTypArgFieldNumber;
const int TypeValue::kStrArgFieldNumber;
const int TypeValue::kInt32ArgFieldNumber;
const int TypeValue::kUint32ArgFieldNumber;
const int TypeValue::kFloatArgFieldNumber;
const int TypeValue::kDoubleArgFieldNumber;
const int TypeValue::kBoolArgFieldNumber;
#endif  // !_MSC_VER

TypeValue::TypeValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TypeValue::InitAsDefaultInstance() {
}

TypeValue::TypeValue(const TypeValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TypeValue::SharedCtor() {
  _cached_size_ = 0;
  typarg_ = 1;
  strarg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int32arg_ = 0;
  uint32arg_ = 0u;
  floatarg_ = 0;
  doublearg_ = 0;
  boolarg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeValue::~TypeValue() {
  SharedDtor();
}

void TypeValue::SharedDtor() {
  if (strarg_ != &::google::protobuf::internal::kEmptyString) {
    delete strarg_;
  }
  if (this != default_instance_) {
  }
}

void TypeValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeValue_descriptor_;
}

const TypeValue& TypeValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definicion_5fmensajeria_2eproto();
  return *default_instance_;
}

TypeValue* TypeValue::default_instance_ = NULL;

TypeValue* TypeValue::New() const {
  return new TypeValue;
}

void TypeValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typarg_ = 1;
    if (has_strarg()) {
      if (strarg_ != &::google::protobuf::internal::kEmptyString) {
        strarg_->clear();
      }
    }
    int32arg_ = 0;
    uint32arg_ = 0u;
    floatarg_ = 0;
    doublearg_ = 0;
    boolarg_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mensajes.TypeValue.Type typArg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mensajes::TypeValue_Type_IsValid(value)) {
            set_typarg(static_cast< ::Mensajes::TypeValue_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strArg;
        break;
      }

      // optional string strArg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strArg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strarg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strarg().data(), this->strarg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int32Arg;
        break;
      }

      // optional int32 int32Arg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32Arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32arg_)));
          set_has_int32arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uint32Arg;
        break;
      }

      // optional uint32 uint32Arg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32Arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32arg_)));
          set_has_uint32arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_floatArg;
        break;
      }

      // optional float floatArg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_floatArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floatarg_)));
          set_has_floatarg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_doubleArg;
        break;
      }

      // optional double doubleArg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doubleArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doublearg_)));
          set_has_doublearg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_boolArg;
        break;
      }

      // optional bool boolArg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolarg_)));
          set_has_boolarg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TypeValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Mensajes.TypeValue.Type typArg = 1;
  if (has_typarg()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typarg(), output);
  }

  // optional string strArg = 2;
  if (has_strarg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strarg().data(), this->strarg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strarg(), output);
  }

  // optional int32 int32Arg = 3;
  if (has_int32arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32arg(), output);
  }

  // optional uint32 uint32Arg = 4;
  if (has_uint32arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uint32arg(), output);
  }

  // optional float floatArg = 5;
  if (has_floatarg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->floatarg(), output);
  }

  // optional double doubleArg = 6;
  if (has_doublearg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->doublearg(), output);
  }

  // optional bool boolArg = 7;
  if (has_boolarg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->boolarg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TypeValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Mensajes.TypeValue.Type typArg = 1;
  if (has_typarg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typarg(), target);
  }

  // optional string strArg = 2;
  if (has_strarg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strarg().data(), this->strarg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strarg(), target);
  }

  // optional int32 int32Arg = 3;
  if (has_int32arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int32arg(), target);
  }

  // optional uint32 uint32Arg = 4;
  if (has_uint32arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint32arg(), target);
  }

  // optional float floatArg = 5;
  if (has_floatarg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->floatarg(), target);
  }

  // optional double doubleArg = 6;
  if (has_doublearg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->doublearg(), target);
  }

  // optional bool boolArg = 7;
  if (has_boolarg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->boolarg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TypeValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mensajes.TypeValue.Type typArg = 1;
    if (has_typarg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->typarg());
    }

    // optional string strArg = 2;
    if (has_strarg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strarg());
    }

    // optional int32 int32Arg = 3;
    if (has_int32arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32arg());
    }

    // optional uint32 uint32Arg = 4;
    if (has_uint32arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32arg());
    }

    // optional float floatArg = 5;
    if (has_floatarg()) {
      total_size += 1 + 4;
    }

    // optional double doubleArg = 6;
    if (has_doublearg()) {
      total_size += 1 + 8;
    }

    // optional bool boolArg = 7;
    if (has_boolarg()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TypeValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TypeValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeValue::MergeFrom(const TypeValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typarg()) {
      set_typarg(from.typarg());
    }
    if (from.has_strarg()) {
      set_strarg(from.strarg());
    }
    if (from.has_int32arg()) {
      set_int32arg(from.int32arg());
    }
    if (from.has_uint32arg()) {
      set_uint32arg(from.uint32arg());
    }
    if (from.has_floatarg()) {
      set_floatarg(from.floatarg());
    }
    if (from.has_doublearg()) {
      set_doublearg(from.doublearg());
    }
    if (from.has_boolarg()) {
      set_boolarg(from.boolarg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeValue::CopyFrom(const TypeValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TypeValue::Swap(TypeValue* other) {
  if (other != this) {
    std::swap(typarg_, other->typarg_);
    std::swap(strarg_, other->strarg_);
    std::swap(int32arg_, other->int32arg_);
    std::swap(uint32arg_, other->uint32arg_);
    std::swap(floatarg_, other->floatarg_);
    std::swap(doublearg_, other->doublearg_);
    std::swap(boolarg_, other->boolarg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TypeValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeValue_descriptor_;
  metadata.reflection = TypeValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfoDupla::kIDArgFieldNumber;
const int InfoDupla::kArgValueFieldNumber;
#endif  // !_MSC_VER

InfoDupla::InfoDupla()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfoDupla::InitAsDefaultInstance() {
  argvalue_ = const_cast< ::Mensajes::TypeValue*>(&::Mensajes::TypeValue::default_instance());
}

InfoDupla::InfoDupla(const InfoDupla& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfoDupla::SharedCtor() {
  _cached_size_ = 0;
  idarg_ = 0u;
  argvalue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoDupla::~InfoDupla() {
  SharedDtor();
}

void InfoDupla::SharedDtor() {
  if (this != default_instance_) {
    delete argvalue_;
  }
}

void InfoDupla::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoDupla::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoDupla_descriptor_;
}

const InfoDupla& InfoDupla::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definicion_5fmensajeria_2eproto();
  return *default_instance_;
}

InfoDupla* InfoDupla::default_instance_ = NULL;

InfoDupla* InfoDupla::New() const {
  return new InfoDupla;
}

void InfoDupla::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idarg_ = 0u;
    if (has_argvalue()) {
      if (argvalue_ != NULL) argvalue_->::Mensajes::TypeValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfoDupla::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mensajes.TypeValue ArgValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IDArg;
        break;
      }

      // required uint32 IDArg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IDArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idarg_)));
          set_has_idarg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfoDupla::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Mensajes.TypeValue ArgValue = 1;
  if (has_argvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->argvalue(), output);
  }

  // required uint32 IDArg = 2;
  if (has_idarg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idarg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfoDupla::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Mensajes.TypeValue ArgValue = 1;
  if (has_argvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->argvalue(), target);
  }

  // required uint32 IDArg = 2;
  if (has_idarg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idarg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfoDupla::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 IDArg = 2;
    if (has_idarg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idarg());
    }

    // required .Mensajes.TypeValue ArgValue = 1;
    if (has_argvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->argvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoDupla::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfoDupla* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfoDupla*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfoDupla::MergeFrom(const InfoDupla& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idarg()) {
      set_idarg(from.idarg());
    }
    if (from.has_argvalue()) {
      mutable_argvalue()->::Mensajes::TypeValue::MergeFrom(from.argvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfoDupla::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoDupla::CopyFrom(const InfoDupla& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoDupla::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_argvalue()) {
    if (!this->argvalue().IsInitialized()) return false;
  }
  return true;
}

void InfoDupla::Swap(InfoDupla* other) {
  if (other != this) {
    std::swap(idarg_, other->idarg_);
    std::swap(argvalue_, other->argvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfoDupla::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfoDupla_descriptor_;
  metadata.reflection = InfoDupla_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageCommand_ECmdState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCommand_ECmdState_descriptor_;
}
bool MessageCommand_ECmdState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageCommand_ECmdState MessageCommand::SEND;
const MessageCommand_ECmdState MessageCommand::CMD_ACK;
const MessageCommand_ECmdState MessageCommand::CMD_NOT_ACK;
const MessageCommand_ECmdState MessageCommand::CMD_EXECUTED;
const MessageCommand_ECmdState MessageCommand::CMD_EXECUTING;
const MessageCommand_ECmdState MessageCommand::ECmdState_MIN;
const MessageCommand_ECmdState MessageCommand::ECmdState_MAX;
const int MessageCommand::ECmdState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageCommand::kHeaderFieldNumber;
const int MessageCommand::kIDCommandFieldNumber;
const int MessageCommand::kCmdStateFieldNumber;
const int MessageCommand::kArgumentFieldNumber;
#endif  // !_MSC_VER

MessageCommand::MessageCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageCommand::InitAsDefaultInstance() {
  header_ = const_cast< ::Mensajes::MessageHeader*>(&::Mensajes::MessageHeader::default_instance());
}

MessageCommand::MessageCommand(const MessageCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageCommand::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  idcommand_ = 0u;
  cmdstate_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageCommand::~MessageCommand() {
  SharedDtor();
}

void MessageCommand::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void MessageCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCommand_descriptor_;
}

const MessageCommand& MessageCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definicion_5fmensajeria_2eproto();
  return *default_instance_;
}

MessageCommand* MessageCommand::default_instance_ = NULL;

MessageCommand* MessageCommand::New() const {
  return new MessageCommand;
}

void MessageCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::Mensajes::MessageHeader::Clear();
    }
    idcommand_ = 0u;
    cmdstate_ = 1;
  }
  argument_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 IDCommand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idcommand_)));
          set_has_idcommand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CmdState;
        break;
      }

      // required .Mensajes.MessageCommand.ECmdState CmdState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CmdState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mensajes::MessageCommand_ECmdState_IsValid(value)) {
            set_cmdstate(static_cast< ::Mensajes::MessageCommand_ECmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_argument;
        break;
      }

      // repeated .Mensajes.InfoDupla argument = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_argument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_argument;
        if (input->ExpectTag(34)) goto parse_header;
        break;
      }

      // required .Mensajes.MessageHeader header = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 IDCommand = 1;
  if (has_idcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idcommand(), output);
  }

  // required .Mensajes.MessageCommand.ECmdState CmdState = 2;
  if (has_cmdstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmdstate(), output);
  }

  // repeated .Mensajes.InfoDupla argument = 3;
  for (int i = 0; i < this->argument_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->argument(i), output);
  }

  // required .Mensajes.MessageHeader header = 4;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 IDCommand = 1;
  if (has_idcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idcommand(), target);
  }

  // required .Mensajes.MessageCommand.ECmdState CmdState = 2;
  if (has_cmdstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmdstate(), target);
  }

  // repeated .Mensajes.InfoDupla argument = 3;
  for (int i = 0; i < this->argument_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->argument(i), target);
  }

  // required .Mensajes.MessageHeader header = 4;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mensajes.MessageHeader header = 4;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required uint32 IDCommand = 1;
    if (has_idcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idcommand());
    }

    // required .Mensajes.MessageCommand.ECmdState CmdState = 2;
    if (has_cmdstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdstate());
    }

  }
  // repeated .Mensajes.InfoDupla argument = 3;
  total_size += 1 * this->argument_size();
  for (int i = 0; i < this->argument_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->argument(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageCommand::MergeFrom(const MessageCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  argument_.MergeFrom(from.argument_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Mensajes::MessageHeader::MergeFrom(from.header());
    }
    if (from.has_idcommand()) {
      set_idcommand(from.idcommand());
    }
    if (from.has_cmdstate()) {
      set_cmdstate(from.cmdstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageCommand::CopyFrom(const MessageCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  for (int i = 0; i < argument_size(); i++) {
    if (!this->argument(i).IsInitialized()) return false;
  }
  return true;
}

void MessageCommand::Swap(MessageCommand* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(idcommand_, other->idcommand_);
    std::swap(cmdstate_, other->cmdstate_);
    argument_.Swap(&other->argument_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageCommand_descriptor_;
  metadata.reflection = MessageCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventInfoDupla::kIdComponenteFieldNumber;
const int EventInfoDupla::kIdEventoFieldNumber;
#endif  // !_MSC_VER

EventInfoDupla::EventInfoDupla()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventInfoDupla::InitAsDefaultInstance() {
}

EventInfoDupla::EventInfoDupla(const EventInfoDupla& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventInfoDupla::SharedCtor() {
  _cached_size_ = 0;
  idcomponente_ = 0u;
  idevento_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventInfoDupla::~EventInfoDupla() {
  SharedDtor();
}

void EventInfoDupla::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventInfoDupla::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventInfoDupla::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventInfoDupla_descriptor_;
}

const EventInfoDupla& EventInfoDupla::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definicion_5fmensajeria_2eproto();
  return *default_instance_;
}

EventInfoDupla* EventInfoDupla::default_instance_ = NULL;

EventInfoDupla* EventInfoDupla::New() const {
  return new EventInfoDupla;
}

void EventInfoDupla::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idcomponente_ = 0u;
    idevento_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventInfoDupla::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 idComponente = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idcomponente_)));
          set_has_idcomponente();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idEvento;
        break;
      }

      // required uint32 idEvento = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idEvento:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idevento_)));
          set_has_idevento();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventInfoDupla::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 idComponente = 1;
  if (has_idcomponente()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idcomponente(), output);
  }

  // required uint32 idEvento = 2;
  if (has_idevento()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idevento(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventInfoDupla::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 idComponente = 1;
  if (has_idcomponente()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idcomponente(), target);
  }

  // required uint32 idEvento = 2;
  if (has_idevento()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idevento(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventInfoDupla::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 idComponente = 1;
    if (has_idcomponente()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idcomponente());
    }

    // required uint32 idEvento = 2;
    if (has_idevento()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idevento());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventInfoDupla::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventInfoDupla* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventInfoDupla*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventInfoDupla::MergeFrom(const EventInfoDupla& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idcomponente()) {
      set_idcomponente(from.idcomponente());
    }
    if (from.has_idevento()) {
      set_idevento(from.idevento());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventInfoDupla::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventInfoDupla::CopyFrom(const EventInfoDupla& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventInfoDupla::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EventInfoDupla::Swap(EventInfoDupla* other) {
  if (other != this) {
    std::swap(idcomponente_, other->idcomponente_);
    std::swap(idevento_, other->idevento_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventInfoDupla::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventInfoDupla_descriptor_;
  metadata.reflection = EventInfoDupla_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageEvent::kHeaderFieldNumber;
const int MessageEvent::kEventsFieldNumber;
const int MessageEvent::kEventTypeFieldNumber;
#endif  // !_MSC_VER

MessageEvent::MessageEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageEvent::InitAsDefaultInstance() {
  header_ = const_cast< ::Mensajes::MessageHeader*>(&::Mensajes::MessageHeader::default_instance());
}

MessageEvent::MessageEvent(const MessageEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageEvent::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  eventtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageEvent::~MessageEvent() {
  SharedDtor();
}

void MessageEvent::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void MessageEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageEvent_descriptor_;
}

const MessageEvent& MessageEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definicion_5fmensajeria_2eproto();
  return *default_instance_;
}

MessageEvent* MessageEvent::default_instance_ = NULL;

MessageEvent* MessageEvent::New() const {
  return new MessageEvent;
}

void MessageEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::Mensajes::MessageHeader::Clear();
    }
    eventtype_ = 0u;
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mensajes.EventInfoDupla events = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_events;
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // required .Mensajes.MessageHeader header = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eventType;
        break;
      }

      // required uint32 eventType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventtype_)));
          set_has_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Mensajes.EventInfoDupla events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }

  // required .Mensajes.MessageHeader header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->header(), output);
  }

  // required uint32 eventType = 3;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eventtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Mensajes.EventInfoDupla events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->events(i), target);
  }

  // required .Mensajes.MessageHeader header = 2;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->header(), target);
  }

  // required uint32 eventType = 3;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eventtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mensajes.MessageHeader header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required uint32 eventType = 3;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventtype());
    }

  }
  // repeated .Mensajes.EventInfoDupla events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageEvent::MergeFrom(const MessageEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Mensajes::MessageHeader::MergeFrom(from.header());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageEvent::CopyFrom(const MessageEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  return true;
}

void MessageEvent::Swap(MessageEvent* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    events_.Swap(&other->events_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageEvent_descriptor_;
  metadata.reflection = MessageEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageData::kHeaderFieldNumber;
const int MessageData::kIDDataFieldNumber;
const int MessageData::kMetadatosFieldNumber;
#endif  // !_MSC_VER

MessageData::MessageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageData::InitAsDefaultInstance() {
  header_ = const_cast< ::Mensajes::MessageHeader*>(&::Mensajes::MessageHeader::default_instance());
}

MessageData::MessageData(const MessageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageData::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  iddata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageData::~MessageData() {
  SharedDtor();
}

void MessageData::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void MessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageData_descriptor_;
}

const MessageData& MessageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_definicion_5fmensajeria_2eproto();
  return *default_instance_;
}

MessageData* MessageData::default_instance_ = NULL;

MessageData* MessageData::New() const {
  return new MessageData;
}

void MessageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::Mensajes::MessageHeader::Clear();
    }
    iddata_ = 0u;
  }
  metadatos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mensajes.InfoDupla metadatos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadatos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadatos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_metadatos;
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // required .Mensajes.MessageHeader header = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IDData;
        break;
      }

      // required uint32 IDData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IDData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iddata_)));
          set_has_iddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Mensajes.InfoDupla metadatos = 1;
  for (int i = 0; i < this->metadatos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metadatos(i), output);
  }

  // required .Mensajes.MessageHeader header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->header(), output);
  }

  // required uint32 IDData = 3;
  if (has_iddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iddata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Mensajes.InfoDupla metadatos = 1;
  for (int i = 0; i < this->metadatos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metadatos(i), target);
  }

  // required .Mensajes.MessageHeader header = 2;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->header(), target);
  }

  // required uint32 IDData = 3;
  if (has_iddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iddata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mensajes.MessageHeader header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required uint32 IDData = 3;
    if (has_iddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iddata());
    }

  }
  // repeated .Mensajes.InfoDupla metadatos = 1;
  total_size += 1 * this->metadatos_size();
  for (int i = 0; i < this->metadatos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadatos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageData::MergeFrom(const MessageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  metadatos_.MergeFrom(from.metadatos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Mensajes::MessageHeader::MergeFrom(from.header());
    }
    if (from.has_iddata()) {
      set_iddata(from.iddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageData::CopyFrom(const MessageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  for (int i = 0; i < metadatos_size(); i++) {
    if (!this->metadatos(i).IsInitialized()) return false;
  }
  return true;
}

void MessageData::Swap(MessageData* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(iddata_, other->iddata_);
    metadatos_.Swap(&other->metadatos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageData_descriptor_;
  metadata.reflection = MessageData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mensajes

// @@protoc_insertion_point(global_scope)
